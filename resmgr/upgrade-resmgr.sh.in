#!/bin/sh
#
###############################################################################
#
# Upgrade Zenoss Resource Manager
#
###############################################################################
set -e
export SERVICE_TENANT_ID="`serviced service list resmgr --format='{{.ID}}'`"
export UPGRADE_REINDEX
export REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS
BACKUP_DIR="/tmp/upgrade-backup"
echo "Creating backup: the backup process may take a while."
mkdir $BACKUP_DIR
serviced backup $BACKUP_DIR
BACKUP_FILE=$(ls $BACKUP_DIR | sort -n | head -1)

serviced snapshot untag $SERVICE_TENANT_ID preupgrade-resmgr-%VERSION%

echo "Getting FROM_VERSION from the 'Version' setting."
FROM_VERSION=$(serviced service list resmgr --format='{{.Version}}')
TO_VERSION=%VERSION%

if [ -z "$FROM_VERSION" ];
then
    echo "Getting FROM_VERSION from the 'ImageID' setting."
    FROM_VERSION=$(serviced service list resmgr --format '{{.ImageID}}' | awk '{ print "localhost:5000/"$0" cat /opt/zenoss/Products/ZenModel/ZVersion.py" }' | xargs docker run --rm | grep VERSION | cut -d'"' -f2)
fi

if [ -z "$FROM_VERSION" ];
then
    echo "Getting FROM_VERSION from the current_version.txt file."
    FROM_VERSION=$(grep 'SVC_USE zenoss/resmgr_[^:_]*:.*' /root/%SHORT_VERSION%.x/current_version.txt | cut -d':' -f2 | cut -d'_' -f1)
    if [ -z "$FROM_VERSION" ];
    then
        echo "Could not get the previous RM version number from serviced, please edit current_version.txt to set it."
        echo "Change this line 'SVC_USE zenoss/resmgr_REPLACE_1' to reflect the pre-upgrade version, for example:"
        echo "SVC_USE zenoss/resmgr_5.2:5.2.6_1"
        exit 1
    else
        echo "Using FROM_VERSION provided by change to current_version.txt"
    fi
fi

echo "Preparing to update from "$FROM_VERSION" to "$TO_VERSION" version."
FROM_VERSION_SHORT=$(cut -d'.' -f1,2 <<< $FROM_VERSION)
sed -i 's/REPLACE/'"$FROM_VERSION_SHORT:$FROM_VERSION"'/g' /root/%SHORT_VERSION%.x/current_version.txt
serviced script run /root/%SHORT_VERSION%.x/current_version.txt --service Zenoss.resmgr

if [ $(echo "${FROM_VERSION}" | cut -c1) -eq 5 ] && [ $(echo "${TO_VERSION}" | cut -c1) -eq 6 ];
then
    echo "Starting reindex process."
    UPGRADE_REINDEX='SVC_EXEC NO_COMMIT "Zenoss.resmgr/Zenoss/User Interface/Zope" su - zenoss -c "/opt/zenoss/bin/upgrade_reindex.sh Zenoss.resmgr"'
    REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS='SVC_EXEC NO_COMMIT "Zenoss.resmgr/Zenoss/User Interface/Zope" /opt/zenoss/bin/zenmigrate --step=RemoveEmptyProductClassRelationships --dont-bump'
fi

sed -i "s@%UPGRADE_REINDEX%@${UPGRADE_REINDEX}@g; s@%REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS%@${REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS}@g;" /root/%SHORT_VERSION%.x/upgrade-resmgr.txt
sed -i "s@%UPGRADE_REINDEX%@${UPGRADE_REINDEX}@g; s@%REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS%@${REMOVE_EMPTY_PRODUCT_CLASS_RELATIONSHIPS}@g;" /root/%SHORT_VERSION%.x/upgrade-impact.txt

if [ $(serviced service status --show-fields Name  Zenoss.resmgr/Infrastructure/Impact | grep Impact) ]; then
    echo "Starting Impact upgrade."
    serviced script run /root/%SHORT_VERSION%.x/upgrade-impact.txt --service Zenoss.resmgr
else
    echo "Starting resmgr upgrade." && serviced script run /root/%SHORT_VERSION%.x/upgrade-resmgr.txt --service Zenoss.resmgr && /opt/serviced/bin/serviced-set-version Zenoss.resmgr %VERSION% || echo "Upgrade failed - performing restore backup." && serviced service stop Zenoss.resmgr && sleep 10 && serviced restore $BACKUP_DIR/$BACKUP_FILE
fi

rm -rf $BACKUP_DIR

